#!/usr/bin/env ruby
# -*- coding:utf-8 -*-
require 'optparse'

LIST_REVS=200

$filter = :all
$verbose = false
opt=OptionParser.new
opt.on('--filter=FILTER') {|mode| $filter=mode.to_sym }
opt.on('-v', '--[no-]verbose') {|v| $verbose = v }
opt.parse!(ARGV)

unless $*.length == 1
	puts <<-EOS
USAGE: $0 [--filter=FILTER] [-v | --[no-]verbose] repo-url
	起動すると、repo-urlからFILTERで指定されたリビジョンを表示した状態でエディタが開く
	マージしたいやつの先頭に*つける
	cherry pickマージされる

    FILTER:
      all: デフォルト。最新#{LIST_REVS}リビジョン
      unmerged: 未マージのやつ全部
      continue: 最後に実行したやつをもう一度編集
	EOS
	exit 1
end

REPO_URL=$*[0]

require 'nokogiri'

class CommandFailed < StandardError; end

def system! command
  puts "$$$ #{command}" if $verbose
  ret = system command
  raise CommandFailed, "ERROR: Exit status is nonzero: #{$?} (command: #{command})" unless $?.exitstatus == 0
end

def system_read! command
  puts "$$$ #{command}" if $verbose
  out = `#{command}`
  raise CommandFailed, "ERROR: Exit status is nonzero: #{$?} (command: #{command})" unless $?.exitstatus == 0
  out
end

system! "svn update"

# xml:String -> [{rev:String, date:String, author:String, message:String, message_oneline:String, message_detail:[String...]}, ...]
def parse_log_xml xml
  doc = Nokogiri(xml)
  doc.xpath('//logentry').map do|log|
    message = log.xpath('msg').first.text
    {
      rev: log.attribute('revision').value,
      date: log.xpath('date').first.text,
      author: log.xpath('author').first.text,
      message: message,
      message_oneline: message.split("\n").first,
      message_detail: message.split("\n")[1..-1] || [],
    }
  end
end

def fetch_log(rev)
  parse_log_xml(system_read! "svn log -r #{rev} --xml #{REPO_URL}")
end

# nil | rettype(parse_log_xml)
logs = nil
case $filter
when :all
  puts "Fetching logs..."
  logs = parse_log_xml system_read! "svn log --limit #{LIST_REVS} --xml #{REPO_URL}"
when :unmerged
  puts "Fetching unmerged revisions..."
  revs = (system_read! "svn mergeinfo --show-revs eligible #{REPO_URL}").split(/\n/).reject(&:empty?)
  puts "Fetching logs... (#{revs.length} revisions total)"
  logs = revs.flat_map{|rev|
    fetch_log(rev)
  }
when :continue
  logs = nil
else
  raise "Unknown filter: #{$filter}"
end

def write_log_entries f,logs
  logs.each do|log|
    f.puts "r#{log[:rev]} #{'%020s' % log[:author]} #{log[:message_oneline]}"
    f.puts log[:message_detail].map{|line|"\t#{line}"}
  end
end

if logs
  File.open('.svn-cherry-pick.target', 'w'){|f|
    f.puts <<-EOS
# リビジョンの前に"*"をつけたものがcherry-pickの対象となる
# キャンセルしたい場合は*をつけずに終了すればよい
    EOS
    write_log_entries(f,logs)
  }
end

system "#{ENV['EDITOR']||'vi'} .svn-cherry-pick.target"

revs=[]
File.open('.svn-cherry-pick.target'){|target|
  File.open('.svn-cherry-pick.message','w') {|msg|
    msg.puts "merged from #{REPO_URL}"
    on_selected_commit = false
    target.each_line {|line|
      if line =~ /^\*\s*r(\d+)\s/
        revs << $1
        on_selected_commit = true
        msg.puts line.gsub(/^\*\s*/,'')
      elsif line =~ /^r\d+/
        on_selected_commit = false
      else
        msg.puts line if on_selected_commit
      end
    }
  }
}
if revs.empty?
  puts "==================== ABORTED ===================="
  exit 1
end

merge_command = "(set -e; for rev in #{revs.map{|r|r.to_i}.sort.join(' ')}; do svn merge -c $rev #{REPO_URL}; done; svn status)"

puts "==================== COMMAND ===================="
puts merge_command
puts "==================== MERGING ===================="
puts
system! merge_command
puts
puts "コミットメッセージは .svn-cherry-pick.message にある"
system! "svn commit"
